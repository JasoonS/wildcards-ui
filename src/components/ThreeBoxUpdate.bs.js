// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Box from "3box";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as $$String from "rescript/lib/es6/string.js";
import * as $$Promise from "reason-promise/src/js/promise.bs.js";
import * as RimbleUi from "rimble-ui";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as RootProvider from "../harberger-lib/RootProvider.bs.js";
import * as UserProvider from "../harberger-lib/js/user-provider/UserProvider.bs.js";

function ThreeBoxUpdate$ProfileItem(props) {
  var onEdit = props.onEdit;
  var fieldValue = props.fieldValue;
  var match = React.useState(function () {
        return $$String.trim(fieldValue).length === 0;
      });
  var setIsEdit = match[1];
  return React.createElement(React.Fragment, {
              children: match[0] ? React.createElement("div", undefined, React.createElement(RimbleUi.Input, {
                          _type: "string",
                          placeholder: props.fieldName,
                          onChange: (function ($$event) {
                              var value = Belt_Option.getWithDefault($$event.target.value, "");
                              Curry._1(onEdit, (function (param) {
                                      return value;
                                    }));
                            }),
                          value: fieldValue
                        })) : React.createElement("div", {
                      onClick: (function (e) {
                          e.preventDefault();
                          Curry._1(setIsEdit, (function (param) {
                                  return true;
                                }));
                        })
                    }, React.createElement("small", undefined, React.createElement("strong", undefined, props.fieldTitle, React.createElement(RimbleUi.Tooltip, {
                                  message: props.fieldDescription,
                                  placement: "top",
                                  children: React.createElement("span", undefined, "â“˜")
                                }))), React.createElement("br", undefined), fieldValue, React.createElement("br", undefined))
            });
}

var ProfileItem = {
  make: ThreeBoxUpdate$ProfileItem
};

function ThreeBoxUpdate$ProfileDetails(props) {
  var setThreeBoxState = props.setThreeBoxState;
  var reloadUser = props.reloadUser;
  var profileDescription = props.profileDescription;
  var profileName = props.profileName;
  var match = React.useState(function () {
        return profileName;
      });
  var setEditedName = match[1];
  var editedName = match[0];
  var match$1 = React.useState(function () {
        return profileDescription;
      });
  var setEditedDescription = match$1[1];
  var editedDescription = match$1[0];
  var nameChange = editedName !== profileName;
  var descriptionChange = editedDescription !== profileDescription;
  var areChanges = nameChange || descriptionChange;
  var optEthereumWallet = RootProvider.useCurrentUser(undefined);
  var optWeb3Provider = RootProvider.useWeb3(undefined);
  var tmp;
  var tmp$1 = props.threeBoxState;
  if (typeof tmp$1 === "number") {
    tmp = tmp$1 === /* Loading3Box */0 ? React.createElement(RimbleUi.Heading, {
            children: "Loading 3Box..."
          }) : React.createElement(React.Fragment, {
            children: React.createElement(RimbleUi.Heading, {
                  children: "There was an error loading your box"
                })
          });
  } else {
    switch (tmp$1.TAG | 0) {
      case /* DefaultView */0 :
          tmp = React.createElement(React.Fragment, {
                children: null
              }, React.createElement("p", undefined, "click on any item to edit it"), React.createElement(ThreeBoxUpdate$ProfileItem, {
                    fieldName: "name",
                    fieldTitle: "Name",
                    fieldDescription: "Your 3box name",
                    fieldValue: editedName,
                    onEdit: setEditedName
                  }), React.createElement(ThreeBoxUpdate$ProfileItem, {
                    fieldName: "description",
                    fieldTitle: "Description",
                    fieldDescription: "Your 3box description",
                    fieldValue: editedDescription,
                    onEdit: setEditedDescription
                  }), areChanges ? React.createElement(React.Fragment, {
                      children: null
                    }, React.createElement(RimbleUi.Button, {
                          children: "Save",
                          onClick: (function (e) {
                              e.preventDefault();
                              Curry._1(setThreeBoxState, (function (param) {
                                      return /* Loading3Box */0;
                                    }));
                              if (optEthereumWallet !== undefined && optWeb3Provider !== undefined) {
                                $$Promise.getOk($$Promise.Js.toResult(Box.openBox(optEthereumWallet, optWeb3Provider.provider)), (function (threeBoxInstance) {
                                        Curry._1(setThreeBoxState, (function (param) {
                                                return {
                                                        TAG: /* LoggedIn */1,
                                                        _0: threeBoxInstance,
                                                        _1: true
                                                      };
                                              }));
                                        $$Promise.get($$Promise.Js.toResult(threeBoxInstance.syncDone), (function (isBoxLoaded) {
                                                var state;
                                                if (isBoxLoaded.TAG === /* Ok */0) {
                                                  var namePromise = profileName === editedName ? $$Promise.resolved({
                                                          TAG: /* Ok */0,
                                                          _0: undefined
                                                        }) : $$Promise.Js.toResult(threeBoxInstance.public.set("name", editedName));
                                                  var descriptionPromise = profileDescription === editedDescription ? $$Promise.resolved({
                                                          TAG: /* Ok */0,
                                                          _0: undefined
                                                        }) : $$Promise.Js.toResult(threeBoxInstance.public.set("description", editedDescription));
                                                  $$Promise.get($$Promise.all2(namePromise, descriptionPromise), (function (a) {
                                                          if (a[0].TAG === /* Ok */0 && a[1].TAG === /* Ok */0) {
                                                            Curry._1(reloadUser, true);
                                                            return Curry._1(setThreeBoxState, (function (param) {
                                                                          return {
                                                                                  TAG: /* DefaultView */0,
                                                                                  _0: /* Saved */1
                                                                                };
                                                                        }));
                                                          }
                                                          Curry._1(setThreeBoxState, (function (param) {
                                                                  return {
                                                                          TAG: /* DefaultView */0,
                                                                          _0: /* FailedToSave */2
                                                                        };
                                                                }));
                                                        }));
                                                  state = {
                                                    TAG: /* SyncedBox */2,
                                                    _0: threeBoxInstance
                                                  };
                                                } else {
                                                  state = /* Load3BoxError */1;
                                                }
                                                Curry._1(setThreeBoxState, (function (param) {
                                                        return state;
                                                      }));
                                              }));
                                      }));
                                return ;
                              }
                              
                            })
                        }), React.createElement(RimbleUi.Button, {
                          children: "Cancel",
                          onClick: (function (e) {
                              e.preventDefault();
                              Curry._1(setEditedName, (function (param) {
                                      return profileName;
                                    }));
                              Curry._1(setEditedDescription, (function (param) {
                                      return profileDescription;
                                    }));
                            })
                        })) : null);
          break;
      case /* LoggedIn */1 :
          tmp = React.createElement(RimbleUi.Heading, {
                children: "3 box is loaded - syncing profile"
              });
          break;
      case /* SyncedBox */2 :
          tmp = React.createElement(RimbleUi.Heading, {
                children: "3 box is synced, SAVING profile data"
              });
          break;
      case /* SyncedBoxWithSpace */3 :
          tmp = React.createElement(React.Fragment, {
                children: React.createElement(RimbleUi.Heading, {
                      children: "3 box is synced, loading 'wildcards' space"
                    })
              });
          break;
      case /* SyncedSpace */4 :
          tmp = React.createElement(React.Fragment, {
                children: React.createElement(RimbleUi.Heading, {
                      children: "3 box and 'wildcards' space is synced"
                    })
              });
          break;
      
    }
  }
  return React.createElement(RimbleUi.Box, {
              p: 1,
              children: tmp
            });
}

var ProfileDetails = {
  make: ThreeBoxUpdate$ProfileDetails
};

var getResult = (function(result) {
    const parsedResult = JSON.parse(result);
    if (parsedResult.status === "success") {
      return parsedResult.data.verification
    } else {
      return undefined
    }
  });

function ThreeBoxUpdate$TwitterVerification(props) {
  var reloadUser = props.reloadUser;
  var setThreeBoxState = props.setThreeBoxState;
  var threeBoxState = props.threeBoxState;
  var optEthereumWallet = RootProvider.useCurrentUser(undefined);
  var optWeb3Provider = RootProvider.useWeb3(undefined);
  var match = React.useState(function () {
        return /* Uninitialized */0;
      });
  var setTwitterVerificationStep = match[1];
  var twitterVerificationStep = match[0];
  var verifyTwitter = function (param) {
    Curry._1(setThreeBoxState, (function (param) {
            return /* Loading3Box */0;
          }));
    if (optEthereumWallet !== undefined && optWeb3Provider !== undefined) {
      Curry._1(setTwitterVerificationStep, (function (param) {
              return /* PreparePostToTwitter */1;
            }));
      $$Promise.getOk($$Promise.Js.toResult(Box.openBox(optEthereumWallet, optWeb3Provider.provider)), (function (threeBoxInstance) {
              Curry._1(setThreeBoxState, (function (param) {
                      return {
                              TAG: /* LoggedIn */1,
                              _0: threeBoxInstance,
                              _1: true
                            };
                    }));
              Curry._1(setTwitterVerificationStep, (function (param) {
                      return {
                              TAG: /* PostToTwitter */0,
                              _0: threeBoxInstance.DID
                            };
                    }));
              $$Promise.get($$Promise.Js.toResult(threeBoxInstance.syncDone), (function (isBoxLoaded) {
                      var state;
                      state = isBoxLoaded.TAG === /* Ok */0 ? ({
                            TAG: /* SyncedBox */2,
                            _0: threeBoxInstance
                          }) : /* Load3BoxError */1;
                      Curry._1(setThreeBoxState, (function (param) {
                              return state;
                            }));
                    }));
            }));
    }
    
  };
  var removeTwitter = function (param) {
    Curry._1(setThreeBoxState, (function (param) {
            return /* Loading3Box */0;
          }));
    if (optEthereumWallet !== undefined && optWeb3Provider !== undefined) {
      Curry._1(setTwitterVerificationStep, (function (param) {
              return /* PreparePostToTwitter */1;
            }));
      $$Promise.getOk($$Promise.Js.toResult(Box.openBox(optEthereumWallet, optWeb3Provider.provider)), (function (threeBoxInstance) {
              Curry._1(setThreeBoxState, (function (param) {
                      return {
                              TAG: /* LoggedIn */1,
                              _0: threeBoxInstance,
                              _1: true
                            };
                    }));
              Curry._1(setTwitterVerificationStep, (function (param) {
                      return {
                              TAG: /* PostToTwitter */0,
                              _0: threeBoxInstance.DID
                            };
                    }));
              $$Promise.get($$Promise.Js.toResult(threeBoxInstance.syncDone), (function (isBoxLoaded) {
                      var state;
                      if (isBoxLoaded.TAG === /* Ok */0) {
                        threeBoxInstance.public.remove("proof_twitter");
                        Curry._1(reloadUser, true);
                        state = {
                          TAG: /* SyncedBox */2,
                          _0: threeBoxInstance
                        };
                      } else {
                        state = /* Load3BoxError */1;
                      }
                      Curry._1(setThreeBoxState, (function (param) {
                              return state;
                            }));
                    }));
            }));
    }
    
  };
  var submitTwitterVerification = function (did, twitterHandle) {
    Curry._1(setTwitterVerificationStep, (function (param) {
            return {
                    TAG: /* VerifyWithServer */1,
                    _0: did
                  };
          }));
    Js_promise.then_((function (text) {
            var optTwitterProof = getResult(text);
            if (optTwitterProof !== undefined) {
              var exit = 0;
              if (typeof threeBoxState !== "number") {
                switch (threeBoxState.TAG | 0) {
                  case /* SyncedBox */2 :
                  case /* SyncedBoxWithSpace */3 :
                  case /* SyncedSpace */4 :
                      exit = 1;
                      break;
                  default:
                    
                }
              }
              if (exit === 1) {
                $$Promise.getOk($$Promise.Js.toResult(threeBoxState._0.verified.addTwitter(optTwitterProof)), (function (_result) {
                        Curry._1(reloadUser, true);
                        Curry._1(setTwitterVerificationStep, (function (param) {
                                return /* Uninitialized */0;
                              }));
                      }));
              }
              
            }
            return Promise.resolve(undefined);
          }), Js_promise.then_((function (prim) {
                return prim.text();
              }), fetch("https://wildcards.xyz/verification3boxTwitter", {
                  method: "POST",
                  body: Caml_option.some(Belt_Option.getExn(JSON.stringify({
                                did: did,
                                twitterHandle: twitterHandle
                              }))),
                  headers: Caml_option.some(new Headers({
                            "Content-Type": "application/json"
                          }))
                })));
  };
  var match$1 = React.useState(function () {
        return "";
      });
  var setTwitterHandle = match$1[1];
  var twitterHandle = match$1[0];
  if (props.twitterVerification !== undefined) {
    return React.createElement(React.Fragment, {
                children: null
              }, React.createElement("p", undefined, "Your twitter is verified"), React.createElement(RimbleUi.Button, {
                    children: "Remove Verification",
                    onClick: (function (e) {
                        e.preventDefault();
                        removeTwitter(undefined);
                      })
                  }));
  }
  if (typeof twitterVerificationStep === "number") {
    if (twitterVerificationStep === /* Uninitialized */0) {
      return React.createElement(React.Fragment, {
                  children: null
                }, React.createElement(RimbleUi.Heading, {
                      children: "verify your twitter"
                    }), React.createElement(RimbleUi.Input, {
                      _type: "string",
                      placeholder: "twitter_handle",
                      onChange: (function ($$event) {
                          var value = Belt_Option.getWithDefault($$event.target.value, "");
                          Curry._1(setTwitterHandle, (function (param) {
                                  return value;
                                }));
                        }),
                      value: twitterHandle
                    }), React.createElement(RimbleUi.Button, {
                      children: "Verify",
                      onClick: (function (e) {
                          e.preventDefault();
                          verifyTwitter(undefined);
                        })
                    }));
    } else {
      return React.createElement("p", undefined, "Please login to 3box!");
    }
  }
  if (twitterVerificationStep.TAG !== /* PostToTwitter */0) {
    return React.createElement("p", undefined, "Verifying with server!");
  }
  var did = twitterVerificationStep._0;
  var tmp;
  tmp = typeof threeBoxState === "number" || threeBoxState.TAG !== /* SyncedBox */2 ? React.createElement("p", undefined, "waiting to sync 3box before continuing") : React.createElement(RimbleUi.Button, {
          children: "NEXT",
          onClick: (function (e) {
              e.preventDefault();
              submitTwitterVerification(did, twitterHandle);
            })
        });
  return React.createElement(React.Fragment, {
              children: null
            }, React.createElement("p", undefined, "Post the following proof to twitter"), React.createElement("p", undefined, did), React.createElement("button", undefined, React.createElement("a", {
                      className: "modal__github__description__copy__tweet",
                      href: "https://twitter.com/intent/tweet?text=This Tweet links my Twitter account to my 3Box profile!\\n%0D%0A%0D%0Ahttps://wildcards.world/%23user/$currentUser\\n%0D%0A%0D%0ASupport Animal conservation @wildcards_world\\n%0D%0Aâœ…\\n%0D%0A$did\\n%0D%0Aâœ…",
                      rel: "noopener noreferrer",
                      target: "_blank"
                    }, "Tweet this")), tmp);
}

var TwitterVerification = {
  make: ThreeBoxUpdate$TwitterVerification
};

function ThreeBoxUpdate$ThreeBoxUpdate(props) {
  var currentUser = Belt_Option.mapWithDefault(RootProvider.useCurrentUser(undefined), "", (function (a) {
          return a;
        }));
  var userInfoContext = UserProvider.useUserInfoContext(undefined);
  var reloadUser = function (forceReload) {
    Curry._2(userInfoContext.update, currentUser, forceReload);
  };
  Curry._2(userInfoContext.update, currentUser, false);
  var optThreeBoxData = UserProvider.use3BoxUserData(currentUser);
  var match = React.useState(function () {
        return {
                TAG: /* DefaultView */0,
                _0: /* NoState */0
              };
      });
  if (optThreeBoxData === undefined) {
    return React.createElement(RimbleUi.Loader, {});
  }
  var setThreeBoxState = match[1];
  var threeBoxState = match[0];
  var profile = optThreeBoxData.profile;
  var verification = optThreeBoxData.verifications;
  return React.createElement(React.Fragment, {
              children: null
            }, profile !== undefined ? React.createElement("div", undefined, React.createElement(ThreeBoxUpdate$ProfileDetails, {
                        profileName: Belt_Option.mapWithDefault(profile.name, "", (function (a) {
                                return a;
                              })),
                        profileDescription: Belt_Option.mapWithDefault(profile.description, "", (function (a) {
                                return a;
                              })),
                        reloadUser: reloadUser,
                        setThreeBoxState: setThreeBoxState,
                        threeBoxState: threeBoxState
                      })) : React.createElement(RimbleUi.Loader, {}), verification !== undefined ? React.createElement(ThreeBoxUpdate$TwitterVerification, {
                    twitterVerification: verification.twitter,
                    threeBoxState: threeBoxState,
                    setThreeBoxState: setThreeBoxState,
                    reloadUser: reloadUser
                  }) : React.createElement(ThreeBoxUpdate$TwitterVerification, {
                    twitterVerification: undefined,
                    threeBoxState: threeBoxState,
                    setThreeBoxState: setThreeBoxState,
                    reloadUser: reloadUser
                  }));
}

var ThreeBoxUpdate = {
  make: ThreeBoxUpdate$ThreeBoxUpdate
};

function ThreeBoxUpdate$Main(props) {
  var currentUser = Belt_Option.mapWithDefault(RootProvider.useCurrentUser(undefined), "", (function (a) {
          return a;
        }));
  var match = React.useState(function () {
        return false;
      });
  var setIsIntegarted3Box = match[1];
  return React.createElement("div", undefined, React.createElement(RimbleUi.Heading, {
                  children: "Verify your identity"
                }), React.createElement("br", undefined), match[0] ? React.createElement(ThreeBoxUpdate$ThreeBoxUpdate, {}) : React.createElement(React.Fragment, {
                    children: null
                  }, React.createElement(RimbleUi.Text, {
                        children: null
                      }, "Please use", React.createElement("strong", undefined, React.createElement("a", {
                                href: "https://3box.io/" + currentUser,
                                rel: "noopener noreferrer",
                                target: "_blank"
                              }, " 3Box.io ")), "to validate your identity on twitter."), React.createElement("br", undefined), React.createElement(RimbleUi.Text, {
                        children: null
                      }, React.createElement("a", {
                            onClick: (function (_e) {
                                Curry._1(setIsIntegarted3Box, (function (param) {
                                        return true;
                                      }));
                              })
                          }, "Try our experimental 3box integration"), " - but if in doubt go to the official 3box website.")));
}

var Main = {
  make: ThreeBoxUpdate$Main
};

var $$default = ThreeBoxUpdate$Main;

export {
  ProfileItem ,
  ProfileDetails ,
  getResult ,
  TwitterVerification ,
  ThreeBoxUpdate ,
  Main ,
  $$default ,
  $$default as default,
}
/* 3box Not a pure module */
