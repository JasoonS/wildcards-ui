// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cn from "re-classnames/src/Cn.bs.js";
import * as Css from "bs-css-emotion/src/Css.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Int from "bs-platform/lib/es6/belt_Int.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReactCountup from "react-countup";
import * as Browser$ReScriptLogger from "rescript-logger/src/Browser.bs.js";

var Countup = {};

function TotalRaisedEtherCountup(Props) {
  var totalRaised = Props.totalRaised;
  var res = totalRaised.split(".");
  var initialStringPart = Belt_Option.getWithDefault(Belt_Array.get(res, 0), "");
  var decimalsString = Belt_Array.get(res, 1);
  var decimals = Belt_Option.getWithDefault(Belt_Option.flatMap(decimalsString, (function (decimals) {
              return Belt_Int.fromString(decimals.substring(0, 9));
            })), 0);
  Browser$ReScriptLogger.info1({
        rootModule: "TotalRaisedEtherCountup",
        subModulePath: /* [] */0,
        value: "make",
        fullPath: "TotalRaisedEtherCountup.make",
        filePath: "/home/jasoons/Documents/code/ui/src/components/components/TotalRaisedEtherCountup.res"
      }, "INfo", [
        "res",
        res
      ]);
  var leadingZeros = decimalsString !== undefined ? "." + Belt_Option.getWithDefault(Belt_Option.flatMap(Caml_option.null_to_opt(decimalsString.match(/^0*/g)), (function (matches) {
                return Belt_Array.get(matches, 0);
              })), "") : "";
  var countUpObj = ReactCountup.useCountUp({
        start: decimals,
        end: decimals,
        delay: 1000,
        duration: 1,
        redraw: false,
        preserveValue: true
      });
  var startCountup = function (param) {
    countUpObj.start();
    
  };
  var updateCountup = function (param) {
    countUpObj.update(param);
    
  };
  var match = React.useState(function () {
        return false;
      });
  var setShowCountupStyles = match[1];
  var ref = React.useRef(0);
  React.useEffect((function () {
          if (ref.current === decimals) {
            return ;
          }
          ref.current = decimals;
          if (ref.current === 0) {
            countUpObj.start();
            return ;
          }
          countUpObj.update(decimals);
          Curry._1(setShowCountupStyles, (function (param) {
                  return true;
                }));
          var timeout = setTimeout((function (param) {
                  return Curry._1(setShowCountupStyles, (function (param) {
                                return false;
                              }));
                }), 1000);
          return (function (param) {
                    clearTimeout(timeout);
                    
                  });
        }), [
        totalRaised,
        decimals,
        startCountup,
        updateCountup
      ]);
  return React.createElement(React.Fragment, undefined, React.createElement("span", {
                  className: Cn.on(Curry._1(Css.style, {
                            hd: Css.color(Css.green),
                            tl: {
                              hd: Css.fontWeight("bold"),
                              tl: /* [] */0
                            }
                          }), match[0])
                }, initialStringPart, leadingZeros, String(countUpObj.countUp)));
}

var make = TotalRaisedEtherCountup;

export {
  Countup ,
  make ,
  
}
/* Css Not a pure module */
