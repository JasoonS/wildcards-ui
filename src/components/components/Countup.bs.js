// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Cn from "re-classnames/src/Cn.bs.js";
import * as Css from "bs-css-emotion/src/Css.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Int from "bs-platform/lib/es6/belt_Int.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ReactCountup from "react-countup";

function Countup$Basic(Props) {
  var decimals = Props.decimals;
  var prefixStringOpt = Props.prefixString;
  var styleOnCountUpOpt = Props.styleOnCountUp;
  var prefixString = prefixStringOpt !== undefined ? prefixStringOpt : "";
  var styleOnCountUp = styleOnCountUpOpt !== undefined ? styleOnCountUpOpt : "";
  var countUpObj = ReactCountup.useCountUp({
        start: decimals,
        end: decimals,
        delay: 1000,
        duration: 1,
        redraw: false,
        preserveValue: true
      });
  var startCountup = function (param) {
    countUpObj.start();
    
  };
  var updateCountup = function (param) {
    countUpObj.update(param);
    
  };
  var match = React.useState(function () {
        return false;
      });
  var setShowCountupStyles = match[1];
  var ref = React.useRef(0);
  React.useEffect((function () {
          if (ref.current !== decimals) {
            if (ref.current === 0) {
              countUpObj.start();
            } else {
              countUpObj.update(decimals);
              Curry._1(setShowCountupStyles, (function (param) {
                      return true;
                    }));
              setTimeout((function (param) {
                      return Curry._1(setShowCountupStyles, (function (param) {
                                    return false;
                                  }));
                    }), 1000);
            }
            ref.current = decimals;
          }
          
        }), [
        decimals,
        startCountup,
        updateCountup
      ]);
  return React.createElement(React.Fragment, undefined, React.createElement("span", {
                  className: Cn.on(styleOnCountUp, match[0])
                }, prefixString, String(countUpObj.countUp)));
}

var Basic = {
  make: Countup$Basic
};

function Countup$StringFloat(Props) {
  var stringFloat = Props.stringFloat;
  var styleOnCountUpOpt = Props.styleOnCountUp;
  var styleOnCountUp = styleOnCountUpOpt !== undefined ? styleOnCountUpOpt : "";
  var res = stringFloat.split(".");
  var decimalsString = Belt_Array.get(res, 1);
  var optDecimals = Belt_Option.flatMap(decimalsString, (function (decimals) {
          return Belt_Int.fromString(decimals.substring(0, 9));
        }));
  var initialString = Belt_Array.get(res, 0);
  var mainLeadingZeros = initialString !== undefined && initialString !== "0" ? Belt_Option.getWithDefault(Belt_Option.flatMap(Caml_option.null_to_opt(initialString.match(/^0*/g)), (function (matches) {
                return Belt_Array.get(matches, 0);
              })), "") : "";
  var decimalLeadingZeros = decimalsString !== undefined ? "." + Belt_Option.getWithDefault(Belt_Option.flatMap(Caml_option.null_to_opt(decimalsString.match(/^0*/g)), (function (matches) {
                return Belt_Array.get(matches, 0);
              })), "") : ".";
  var initialStringPart = Belt_Option.flatMap(Belt_Array.get(res, 0), Belt_Int.fromString);
  return React.createElement(React.Fragment, undefined, initialStringPart !== undefined ? React.createElement(Countup$Basic, {
                    decimals: initialStringPart,
                    prefixString: mainLeadingZeros,
                    styleOnCountUp: styleOnCountUp
                  }) : null, optDecimals !== undefined ? React.createElement(Countup$Basic, {
                    decimals: optDecimals,
                    prefixString: decimalLeadingZeros,
                    styleOnCountUp: styleOnCountUp
                  }) : null);
}

var StringFloat = {
  make: Countup$StringFloat
};

function Countup$TotalRaised(Props) {
  var totalRaised = Props.totalRaised;
  var styleOnCountUp = Curry._1(Css.style, {
        hd: Css.color(Css.green),
        tl: {
          hd: Css.fontWeight("bold"),
          tl: /* [] */0
        }
      });
  return React.createElement(Countup$StringFloat, {
              stringFloat: totalRaised,
              styleOnCountUp: styleOnCountUp
            });
}

var TotalRaised = {
  make: Countup$TotalRaised
};

export {
  Basic ,
  StringFloat ,
  TotalRaised ,
  
}
/* Css Not a pure module */
