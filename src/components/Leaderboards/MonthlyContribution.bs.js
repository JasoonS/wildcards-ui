// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Css from "bs-css-emotion/src/Css.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Helper from "../../harberger-lib/Helper.bs.js";
import * as QlHooks from "../../harberger-lib/QlHooks.bs.js";
import * as RimbleUi from "rimble-ui";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as RootProvider from "../../harberger-lib/RootProvider.bs.js";
import * as UserProvider from "../../harberger-lib/js/user-provider/UserProvider.bs.js";

var goldTrophyImg = "/img/icons/gold-trophy.png";

var silverTrophyImg = "/img/icons/silver-trophy.png";

var bronzeTrophyImg = "/img/icons/bronze-trophy.png";

var leaderboardTable = Curry._1(Css.style, {
      hd: Css.width({
            NAME: "percent",
            VAL: 100
          }),
      tl: {
        hd: Css.tableLayout("fixed"),
        tl: {
          hd: Css.overflowWrap("breakWord"),
          tl: /* [] */0
        }
      }
    });

var leaderboardHeader = Curry._1(Css.style, {
      hd: Css.backgroundColor({
            NAME: "hex",
            VAL: "73c7d7ff"
          }),
      tl: /* [] */0
    });

var streakTextLeaderboard = Curry._1(Css.style, {
      hd: Css.position(Css.absolute),
      tl: {
        hd: Css.zIndex(100),
        tl: {
          hd: Css.bottom({
                NAME: "percent",
                VAL: -10
              }),
          tl: {
            hd: Css.right({
                  NAME: "percent",
                  VAL: 50
                }),
            tl: {
              hd: Css.transform(Css.translateX({
                        NAME: "px",
                        VAL: -5
                      })),
              tl: /* [] */0
            }
          }
        }
      }
    });

var flameImgLeaderboard = Curry._1(Css.style, {
      hd: Css.width({
            NAME: "percent",
            VAL: 100
          }),
      tl: {
        hd: Css.maxWidth(Css.px(50)),
        tl: /* [] */0
      }
    });

var rankText = Curry._1(Css.style, {
      hd: Css.position(Css.absolute),
      tl: {
        hd: Css.zIndex(100),
        tl: {
          hd: Css.bottom({
                NAME: "percent",
                VAL: -10
              }),
          tl: {
            hd: Css.right({
                  NAME: "percent",
                  VAL: 50
                }),
            tl: {
              hd: Css.transform(Css.translate({
                        NAME: "px",
                        VAL: -4
                      }, {
                        NAME: "px",
                        VAL: -15
                      })),
              tl: /* [] */0
            }
          }
        }
      }
    });

var trophyImg = Curry._1(Css.style, {
      hd: Css.width({
            NAME: "percent",
            VAL: 100
          }),
      tl: {
        hd: Css.width(Css.px(50)),
        tl: {
          hd: Css.height(Css.px(50)),
          tl: /* [] */0
        }
      }
    });

var centerFlame = Curry._1(Css.style, {
      hd: Css.display(Css.block),
      tl: {
        hd: Css.margin(Css.auto),
        tl: {
          hd: Css.width({
                NAME: "px",
                VAL: 70
              }),
          tl: {
            hd: Css.position(Css.relative),
            tl: /* [] */0
          }
        }
      }
    });

var rankMetric = Curry._1(Css.style, {
      hd: Css.fontSize({
            NAME: "px",
            VAL: 16
          }),
      tl: /* [] */0
    });

function rankingColor(index) {
  return Curry._1(Css.style, {
              hd: Css.backgroundColor({
                    NAME: "hex",
                    VAL: index % 2 === 1 ? "b5b5bd22" : "ffffffff"
                  }),
              tl: /* [] */0
            });
}

function MonthlyContribution$ContributorName(Props) {
  var contributor = Props.contributor;
  Curry._2(UserProvider.useUserInfoContext(undefined).update, contributor, false);
  var optThreeBoxData = UserProvider.use3BoxUserData(contributor);
  var optUserName = Belt_Option.flatMap(Belt_Option.flatMap(optThreeBoxData, (function (threeBoxData) {
              return threeBoxData.profile;
            })), (function (threeBoxData) {
          return threeBoxData.name;
        }));
  var clearAndPush = RootProvider.useClearNonUrlStateAndPushRoute(undefined);
  return React.createElement("span", undefined, React.createElement("a", {
                  onClick: (function (e) {
                      e.preventDefault();
                      return Curry._1(clearAndPush, "/#user/" + contributor);
                    })
                }, optUserName !== undefined ? React.createElement("span", undefined, optUserName) : React.createElement("span", undefined, Helper.elipsify(contributor, 20))));
}

var ContributorName = {
  make: MonthlyContribution$ContributorName
};

function MonthlyContribution(Props) {
  var numberOfLeaders = Props.numberOfLeaders;
  var topContributorsOpt = QlHooks.useLoadTopContributorsData(numberOfLeaders);
  return React.createElement("div", undefined, React.createElement(RimbleUi.Heading, {
                  children: "Wildcards Monthly Contribution Leaderboard"
                }), React.createElement("br", undefined), React.createElement(RimbleUi.Table, {
                  children: null,
                  className: leaderboardTable
                }, React.createElement("thead", {
                      className: leaderboardHeader
                    }, React.createElement("tr", undefined, React.createElement("th", undefined, "Rank"), React.createElement("th", undefined, "Guardian"), React.createElement("th", undefined, "Monthly Contribution"))), React.createElement("tbody", undefined, topContributorsOpt !== undefined ? Belt_Array.mapWithIndex(topContributorsOpt, (function (index, param) {
                              var amount = param[1];
                              var contributor = param[0];
                              var amountRaisedFloat = Belt_Option.getWithDefault(Belt_Float.fromString(amount), 0);
                              if (amountRaisedFloat < 0.0000001) {
                                return null;
                              } else {
                                return React.createElement("tr", {
                                            key: contributor,
                                            className: rankingColor(index)
                                          }, React.createElement("td", undefined, React.createElement("span", {
                                                    className: centerFlame
                                                  }, index === 0 ? React.createElement("img", {
                                                          className: trophyImg,
                                                          src: goldTrophyImg
                                                        }) : (
                                                      index === 1 ? React.createElement("img", {
                                                              className: trophyImg,
                                                              src: silverTrophyImg
                                                            }) : (
                                                          index === 2 ? React.createElement("img", {
                                                                  className: trophyImg,
                                                                  src: bronzeTrophyImg
                                                                }) : React.createElement("div", {
                                                                  className: trophyImg
                                                                })
                                                        )
                                                    ), React.createElement("p", {
                                                        className: rankText
                                                      }, React.createElement("strong", undefined, "#", String(index + 1 | 0))))), React.createElement("td", undefined, React.createElement(MonthlyContribution$ContributorName, {
                                                    contributor: contributor
                                                  })), React.createElement("td", {
                                                className: rankMetric
                                              }, amount + " ETH"));
                              }
                            })) : null)));
}

var flameImg = "/img/streak-flame.png";

var make = MonthlyContribution;

export {
  flameImg ,
  goldTrophyImg ,
  silverTrophyImg ,
  bronzeTrophyImg ,
  leaderboardTable ,
  leaderboardHeader ,
  streakTextLeaderboard ,
  flameImgLeaderboard ,
  rankText ,
  trophyImg ,
  centerFlame ,
  rankMetric ,
  rankingColor ,
  ContributorName ,
  make ,
  
}
/* leaderboardTable Not a pure module */
