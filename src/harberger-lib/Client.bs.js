// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as ApolloClient from "reason-apollo-client/src/ApolloClient.bs.js";
import * as ApolloClient__ApolloClient from "reason-apollo-client/src/@apollo/client/ApolloClient__ApolloClient.bs.js";
import * as ReasonMLCommunity__ApolloClient from "reason-apollo-client/src/ReasonMLCommunity__ApolloClient.bs.js";
import * as ApolloClient__Link_Http_HttpLink from "reason-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.bs.js";
import * as ApolloClient__Cache_InMemory_InMemoryCache from "reason-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.bs.js";

function httpLink(uri) {
  return ApolloClient__Link_Http_HttpLink.make((function (param) {
                return uri;
              }), undefined, undefined, undefined, undefined, undefined, undefined, undefined);
}

function chainContextToStr(chain) {
  switch (chain) {
    case /* Neither */0 :
        return "neither";
    case /* MaticQuery */1 :
        return "matic";
    case /* MainnetQuery */2 :
        return "mainnet";
    
  }
}

function networkSwitcherHttpLink(uri, matic, mainnet) {
  return ReasonMLCommunity__ApolloClient.Link.split((function (operation) {
                var context = operation.getContext();
                if (context === undefined) {
                  return true;
                }
                var actualContext = context.context;
                if (actualContext !== undefined) {
                  return actualContext === 0;
                } else {
                  return true;
                }
              }), httpLink(uri), ReasonMLCommunity__ApolloClient.Link.split((function (operation) {
                    var context = operation.getContext();
                    if (context === undefined) {
                      return false;
                    }
                    var actualContext = context.context;
                    if (actualContext !== undefined) {
                      return actualContext === 1;
                    } else {
                      return false;
                    }
                  }), httpLink(matic), httpLink(mainnet)));
}

function instance(getGraphEndpoints) {
  var match = Curry._1(getGraphEndpoints, undefined);
  return ApolloClient.make(undefined, undefined, undefined, Caml_option.some(networkSwitcherHttpLink(match.db, match.matic, match.mainnet)), ApolloClient__Cache_InMemory_InMemoryCache.make(undefined, undefined, undefined, undefined, undefined, undefined), undefined, undefined, true, undefined, ApolloClient__ApolloClient.DefaultOptions.make(ApolloClient__ApolloClient.DefaultMutateOptions.make(undefined, undefined, true, /* All */2, undefined, undefined), ApolloClient__ApolloClient.DefaultQueryOptions.make(undefined, /* All */2, undefined, undefined), ApolloClient__ApolloClient.DefaultWatchQueryOptions.make(undefined, /* All */2, undefined, undefined), undefined), undefined, undefined, undefined, undefined, undefined, undefined, undefined);
}

export {
  httpLink ,
  chainContextToStr ,
  networkSwitcherHttpLink ,
  instance ,
  
}
/* ApolloClient Not a pure module */
