// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Css from "bs-css-emotion/src/Css.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as CountDown from "../CountDown.bs.js";
import * as RimbleUi from "rimble-ui";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as UseDebounce from "use-debounce";

var inputStyle = Curry._1(Css.style, {
      hd: Css.width({
            NAME: "percent",
            VAL: 100
          }),
      tl: /* [] */0
    });

var rightAlignText = Curry._1(Css.style, {
      hd: Css.textAlign("right"),
      tl: /* [] */0
    });

var infoTooltipStyle = Curry._1(Css.style, {
      hd: Css.display("inlineBlock"),
      tl: /* [] */0
    });

var infoIcon = React.createElement("div", {
      className: infoTooltipStyle
    }, React.createElement(RimbleUi.Icon, {
          name: "Info",
          color: "green",
          size: "16"
        }));

function BuyInput(props) {
  var tokenIdName = props.tokenIdName;
  var setDeposit = props.setDeposit;
  var setNewPrice = props.setNewPrice;
  var deposit = props.deposit;
  var newPrice = props.newPrice;
  var onSubmitBuy = props.onSubmitBuy;
  var match = React.useState(function () {
        return newPrice;
      });
  var setDepositSlider = match[1];
  React.useEffect((function () {
          Curry._1(setDepositSlider, (function (param) {
                  return deposit;
                }));
        }), [
        deposit,
        setDepositSlider
      ]);
  var match$1 = UseDebounce.useDebouncedCallback(setDeposit, 50, {
        maxWait: 500,
        leading: true,
        trailing: true
      });
  var debouncedSetDeposit = match$1.callback;
  return React.createElement(React.Fragment, undefined, React.createElement(RimbleUi.Flex, {
                  children: React.createElement(RimbleUi.Box, {
                        p: 2,
                        mb: 2,
                        children: React.createElement(RimbleUi.Heading, {
                              children: "Purchase " + tokenIdName + ""
                            })
                      })
                }), React.createElement(RimbleUi.Flex, {
                  children: null
                }, React.createElement(RimbleUi.Box, {
                      p: 2,
                      mb: 2,
                      children: null,
                      width: [
                        1,
                        0.5
                      ]
                    }, React.createElement(RimbleUi.Tooltip, {
                          message: "This is the amount of money you will receive if someone purchases " + tokenIdName + " from you.",
                          placement: "top",
                          children: React.createElement(RimbleUi.Text, {
                                children: null
                              }, "Set " + tokenIdName + "'s new for sale price:", infoIcon)
                        }), React.createElement(RimbleUi.Input, {
                          _type: "number",
                          placeholder: "Your Initial Sale Price",
                          className: inputStyle,
                          onChange: (function ($$event) {
                              Curry._1(setNewPrice, Belt_Option.getWithDefault($$event.target.value, ""));
                            }),
                          value: newPrice
                        })), React.createElement(RimbleUi.Box, {
                      p: 2,
                      mb: 2,
                      children: null,
                      width: [
                        1,
                        0.5
                      ]
                    }, React.createElement(RimbleUi.Tooltip, {
                          message: "This is the monthly contribution that will go towards conservation of at risk animals. This will be deducted continuously from your deposit",
                          placement: "top",
                          children: React.createElement(RimbleUi.Text, {
                                children: null,
                                className: rightAlignText
                              }, "Your monthly contribution:", infoIcon)
                        }), React.createElement("br", undefined), React.createElement(RimbleUi.Text, {
                          children: props.patronage,
                          className: rightAlignText
                        }))), React.createElement(RimbleUi.Flex, {
                  children: null,
                  alignItems: "center",
                  justifyContent: "center"
                }, React.createElement(RimbleUi.Box, {
                      p: 2,
                      mb: 2,
                      children: null,
                      width: [
                        1,
                        0.3
                      ]
                    }, React.createElement(RimbleUi.Tooltip, {
                          message: "The deposit is the funds that will be used to cover your monthly contribution.",
                          placement: "top",
                          children: React.createElement(RimbleUi.Text, {
                                children: null
                              }, "Set your deposit:", infoIcon)
                        }), React.createElement(RimbleUi.Input, {
                          _type: "number",
                          placeholder: "Your Initial Deposit",
                          className: inputStyle,
                          onChange: (function ($$event) {
                              Curry._1(setDeposit, Belt_Option.getWithDefault($$event.target.value, ""));
                            }),
                          value: deposit
                        })), React.createElement(RimbleUi.Box, {
                      p: 2,
                      mb: 2,
                      children: React.createElement(RimbleUi.Slider, {
                            value: match[0],
                            className: inputStyle,
                            onChange: (function ($$event) {
                                var value = Belt_Option.getWithDefault($$event.target.value, "");
                                Curry._1(setDepositSlider, (function (param) {
                                        return value;
                                      }));
                                Curry._1(debouncedSetDeposit, value);
                              }),
                            min: "0.0001",
                            max: props.maxAvailableDeposit,
                            step: "0.0000001"
                          }),
                      width: [
                        1,
                        0.7
                      ]
                    })), React.createElement("p", undefined, "This deposit will last " + (CountDown.displayTimeLeftHours(props.depositTimeInSeconds) + " for your monthly contribution")), React.createElement(RimbleUi.Flex, {
                  children: React.createElement(RimbleUi.Box, {
                        p: 2,
                        mb: 2,
                        children: React.createElement(RimbleUi.Button, {
                              children: "Buy",
                              onClick: (function (param) {
                                  Curry._1(onSubmitBuy, undefined);
                                })
                            }),
                        width: [
                          1,
                          0.7
                        ]
                      })
                }));
}

var make = BuyInput;

export {
  inputStyle ,
  rightAlignText ,
  infoTooltipStyle ,
  infoIcon ,
  make ,
}
/* inputStyle Not a pure module */
